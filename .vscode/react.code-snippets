{
  "react component with props": {
    "scope": "typescript, typescriptreact",
    "prefix": "rcp",
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.scss';",
      "",
      "export type ${TM_FILENAME_BASE}Props = {",
      "  $1: $2;",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = (props: ${TM_FILENAME_BASE}Props) => {",
      "  $0",
      "",
      "  return (",
      "    <></>",
      "  );",
      "};",
      "",
    ],
    "description": "React Typescript Component with Props",
  },
  "react component": {
    "scope": "typescript, typescriptreact",
    "prefix": "rc",
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.scss';",
      "",
      "export const ${TM_FILENAME_BASE} = () => {",
      "  $0",
      "",
      "  return (",
      "    <></>",
      "  );",
      "};",
      "",
    ],
    "description": "React Typescript Component without Props",
  },
  "console log with text": {
    "scope": "javascript, typescript, typescriptreact, javascriptreact",
    "prefix": "log",
    "body": ["console.log('$1', $1);$0"],
    "description": "Console log with text",
  },
  "useEffect": {
    "scope": "typescriptreact",
    "prefix": "ue",
    "body": ["React.useEffect(() => {", "  $0", "}, [$1]);"],
    "description": "useEffect",
  },
  "useState": {
    "scope": "typescriptreact",
    "prefix": "us",
    "body": ["const [$1, set$2] = React.useState<$3 | null>(${4:null});", "$0"],
    "description": "useState",
  },
  "Repository": {
    "scope": "typescript",
    "prefix": "repo",
    "body": [
      "import AbstractRepository from \"@/databases/AbstractRepository\";",
      "import RepositoryInterface from \"@/databases/RepositoryInterface\";",
      "import $1 from \"./$1\";",
      "",
      "export default class ${TM_FILENAME_BASE} extends AbstractRepository implements RepositoryInterface<$1> {",
      "  private constructor() {",
      "    super();",
      "  }",
      "",
      "  /**",
      "   * Crée et retourne une instance unique de `${TM_FILENAME_BASE}`. Cette méthode assure l'application",
      "   * du design pattern Singleton pour éviter la multiplication des instances de `${TM_FILENAME_BASE}`",
      "   * dans l'application. Elle initialise également la connexion à la base de données si ce n'est",
      "   * pas déjà fait.",
      "   *",
      "   * @returns {Promise<${TM_FILENAME_BASE}>} Une promesse résolue avec l'instance unique de `${TM_FILENAME_BASE}`.",
      "   * @throws {Error} Lance une erreur si l'initialisation de la connexion à la base de données échoue.",
      "   */",
      "  static async getInstance(): Promise<${TM_FILENAME_BASE}> {",
      "    const instance = new ${TM_FILENAME_BASE}();",
      "    await instance.initialize();",
      "    return instance;",
      "  }",
      "}",
    ]
  }
}
